name: Push Updated Backend Docker Image

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      IMAGE_WITH_TAG: ${{ secrets.ECR_BACKEND_REPOSITORY }}:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Restore Docker build cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            buildx-${{ runner.os }}-

      - name: Pull Previous Image for Cache (if cache missed)
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          docker pull $REGISTRY/$IMAGE_WITH_TAG || echo "No previous cache found"


      - name: Create and Use Buildx Builder
        run: docker buildx create --use

      - name: Build, tag, and push Docker image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t $REGISTRY/$IMAGE_WITH_TAG ./todo_list_application \
            --push

      - name: Save Docker build cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}
